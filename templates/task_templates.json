{
  "bug_bounty": {
    "name": "Bug Bounty Hunting",
    "description": "A comprehensive workflow for finding security vulnerabilities in applications",
    "steps": [
      {
        "name": "Reconnaissance",
        "commands": [
          "security scan-domain example.com",
          "researcher search 'common vulnerabilities in [technology]'",
          "terminal nmap -sV example.com"
        ],
        "description": "Gather initial information about the target"
      },
      {
        "name": "Vulnerability Assessment",
        "commands": [
          "security analyze-headers example.com",
          "security find-exposed-endpoints example.com",
          "security check-vulnerabilities example.com"
        ],
        "description": "Identify potential security weaknesses"
      },
      {
        "name": "Exploitation Testing",
        "commands": [
          "security test-injection example.com/path?param=test",
          "security check-xss example.com/path",
          "coder generate python 'script to test CSRF vulnerability'"
        ],
        "description": "Test identified vulnerabilities with safe exploitation"
      },
      {
        "name": "Documentation",
        "commands": [
          "memory remember bug_report 'Detailed vulnerability findings'",
          "file write vulnerability-report.md 'Document findings in markdown format'",
          "security generate-poc exploit.py 'python script demonstrating the vulnerability'"
        ],
        "description": "Document findings for responsible disclosure"
      }
    ],
    "ai_suggestions": {
      "openai": "Use GPT-4o visual analysis to identify vulnerabilities in screenshots of the application",
      "claude": "Leverage Claude's reasoning for crafting detailed reports and understanding complex vulnerability chains",
      "perplexity": "Use Perplexity's research capabilities to find the latest CVEs related to the target's technology stack",
      "deepseek": "Employ DeepSeek for analyzing code snippets to find potential security flaws"
    }
  },
  "code_review": {
    "name": "Code Security Review",
    "description": "Analyze code for security vulnerabilities and best practices",
    "steps": [
      {
        "name": "Setup",
        "commands": [
          "file list .",
          "coder analyze-repo .",
          "terminal git clone [repository-url]"
        ],
        "description": "Set up the codebase for analysis"
      },
      {
        "name": "Static Analysis",
        "commands": [
          "security static-analysis .",
          "coder review python app.py",
          "security check-dependencies requirements.txt"
        ],
        "description": "Perform static code analysis for vulnerabilities"
      },
      {
        "name": "Dynamic Analysis",
        "commands": [
          "security fuzz-test api/endpoint",
          "terminal docker-compose up -d",
          "security run-scanner app:8000"
        ],
        "description": "Perform dynamic testing of running application"
      },
      {
        "name": "Report Generation",
        "commands": [
          "security generate-report .",
          "coder suggest-fixes app.py",
          "file write security-review.md 'Comprehensive security review'"
        ],
        "description": "Generate a complete security report"
      }
    ],
    "ai_suggestions": {
      "openai": "Use GPT-4o to analyze code structure and suggest security improvements",
      "claude": "Leverage Claude for understanding and explaining complex security patterns in code",
      "perplexity": "Use Perplexity to research best practices for secure coding in this specific domain",
      "deepseek": "Utilize DeepSeek's code understanding to identify subtle security issues"
    }
  },
  "penetration_testing": {
    "name": "Penetration Testing",
    "description": "Comprehensive penetration testing workflow",
    "steps": [
      {
        "name": "Scope Definition",
        "commands": [
          "file write scope.md 'Define testing scope and boundaries'",
          "terminal mkdir pentest-project",
          "memory remember pentest-scope 'Document the scope of the penetration test'"
        ],
        "description": "Define the scope and boundaries of the pentest"
      },
      {
        "name": "Information Gathering",
        "commands": [
          "security scan-network 192.168.1.0/24",
          "terminal whois example.com",
          "researcher search 'example.com infrastructure details'"
        ],
        "description": "Gather information about the target"
      },
      {
        "name": "Vulnerability Scanning",
        "commands": [
          "security scan-vulnerabilities example.com",
          "terminal nikto -h example.com",
          "security scan-ports example.com"
        ],
        "description": "Scan for vulnerabilities in the target"
      },
      {
        "name": "Exploitation",
        "commands": [
          "security exploit CVE-YYYY-XXXX example.com",
          "coder generate python 'script to exploit the vulnerability'",
          "security escalate-privileges targethost"
        ],
        "description": "Attempt to exploit identified vulnerabilities"
      },
      {
        "name": "Post-Exploitation",
        "commands": [
          "security gather-evidence targethost",
          "terminal screenshot evidence.png",
          "security dump-credentials targethost"
        ],
        "description": "Gather evidence and proof of exploitation"
      },
      {
        "name": "Reporting",
        "commands": [
          "file write pentest-report.md 'Detailed penetration test findings'",
          "security generate-executive-summary report.md",
          "file create recommendations.md 'Security improvement recommendations'"
        ],
        "description": "Document findings and recommendations"
      }
    ],
    "ai_suggestions": {
      "openai": "Use GPT-4o to analyze security posture and suggest custom exploits",
      "claude": "Leverage Claude for developing detailed penetration testing plans tailored to the target",
      "perplexity": "Use Perplexity to research the latest exploit techniques for the target's technology stack",
      "deepseek": "Utilize DeepSeek for analyzing complex systems and identifying attack vectors"
    }
  },
  "secure_development": {
    "name": "Secure Development Lifecycle",
    "description": "Implement security throughout the development lifecycle",
    "steps": [
      {
        "name": "Threat Modeling",
        "commands": [
          "security create-threat-model app-name",
          "file write threats.md 'Document potential threats and mitigations'",
          "coder security-requirements app-name"
        ],
        "description": "Identify potential threats and security requirements"
      },
      {
        "name": "Secure Coding",
        "commands": [
          "coder secure-implementation python auth.py",
          "security check-code auth.py",
          "coder implement-owasp python 'authentication flow'"
        ],
        "description": "Implement secure coding practices"
      },
      {
        "name": "Security Testing",
        "commands": [
          "security unit-tests auth.py",
          "security scan-dependencies requirements.txt",
          "security integration-tests auth-flow"
        ],
        "description": "Perform security-focused testing"
      },
      {
        "name": "Deployment Security",
        "commands": [
          "devops secure-docker Dockerfile",
          "security harden-config nginx.conf",
          "devops implement-waf app-name"
        ],
        "description": "Secure the deployment environment"
      },
      {
        "name": "Monitoring & Response",
        "commands": [
          "security setup-monitoring app-name",
          "devops implement-logging app-name",
          "security create-incident-response-plan app-name"
        ],
        "description": "Set up security monitoring and incident response"
      }
    ],
    "ai_suggestions": {
      "openai": "Use GPT-4o to generate secure code snippets following best practices",
      "claude": "Leverage Claude for detailed security requirements and threat modeling",
      "perplexity": "Use Perplexity to research the latest secure coding practices for your technology stack",
      "deepseek": "Employ DeepSeek for identifying potential security flaws early in the development process"
    }
  }
}